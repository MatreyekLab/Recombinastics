ggplot() + geom_point(data = grn_stat_density_values, aes(x = x, y = y))
grn_stat_density_miny <- as.numeric(grn_stat_density_values %>% filter(x > 2 & x < 4) %>% summarize(miny = min(y)))
grn_stat_density_minx <- grn_stat_density_values[grn_stat_density_values$y == grn_stat_density_miny,"x"]
ggplot() + geom_point(data = grn_stat_density_values, aes(x = x, y = y)) + geom_vline(xintercept = grn_stat_density_minx)
## Next look at green cells
red_stat_density_plot <- ggplot() + scale_x_log10() + geom_density(data = dlp_analysis, aes(x = red))
red_stat_density_values <- red_stat_density_plot %>%
ggplot_build() %>%
`[[`("data") %>%
`[[`(1) %>% select(x,y)
ggplot() + geom_point(data = red_stat_density_values, aes(x = x, y = y))
red_stat_density_miny <- as.numeric(red_stat_density_values %>% filter(x > 2 & x < 4) %>% summarize(miny = min(y)))
red_stat_density_minx <- red_stat_density_values[red_stat_density_values$y == red_stat_density_miny,"x"]
ggplot() + geom_point(data = red_stat_density_values, aes(x = x, y = y)) + geom_vline(xintercept = red_stat_density_minx)
## Now look at green only, red only, and green and red cells
dlp_analysis_grnpos_redneg <- dlp_analysis %>% filter(grn >= 10^grn_stat_density_minx & red <= 10^red_stat_density_minx) %>% group_by(clone, treatment, replicate) %>% tally()
dlp_analysis_summary <- left_join(dlp_analysis_summary,dlp_analysis_grnpos_redneg,c("clone", "treatment", "replicate"))
colnames(dlp_analysis_summary)[9] <- "grnpos_redneg"
dlp_analysis_summary$grnpos_redneg_pct <- dlp_analysis_summary$grnpos_redneg/dlp_analysis_summary$all
DLP_summary_grnpos_redneg_plot <- ggplot() + labs(x = NULL, y = "Percent of cells", title = "Green+ Red-") + scale_y_continuous(limits = c(0,1)) +
geom_quasirandom(data = dlp_analysis_summary, aes(x = treatment, y = grnpos_redneg_pct, color = clone), alpha = 0.5)
ggsave(file = "plots/DLP_summary_grnpos_redneg_plot.pdf", DLP_summary_grnpos_redneg_plot, height = 1.25, width = 2.75)
dlp_analysis_grnpos_redpos <- dlp_analysis %>% filter(grn >= 10^grn_stat_density_minx & red >= 10^red_stat_density_minx) %>% group_by(clone, treatment, replicate) %>% tally()
dlp_analysis_summary <- left_join(dlp_analysis_summary,dlp_analysis_grnpos_redpos,c("clone", "treatment", "replicate"))
colnames(dlp_analysis_summary)[11] <- "grnpos_redpos"
dlp_analysis_summary$grnpos_redpos_pct <- dlp_analysis_summary$grnpos_redpos/dlp_analysis_summary$all
DLP_summary_grnpos_redpos_plot <- ggplot() + labs(x = NULL, y = "Percent of cells", title = "Green+ Red+") + scale_y_continuous(limits = c(0,1)) +
geom_quasirandom(data = dlp_analysis_summary, aes(x = treatment, y = grnpos_redpos_pct, color = clone), alpha = 0.5)
ggsave(file = "plots/DLP_summary_grnpos_redpos_plot.pdf", DLP_summary_grnpos_redpos_plot, height = 1.25, width = 2.75)
dlp_analysis_grnneg_redpos <- dlp_analysis %>% filter(grn <= 10^grn_stat_density_minx & red >= 10^red_stat_density_minx) %>% group_by(clone, treatment, replicate) %>% tally()
dlp_analysis_summary <- left_join(dlp_analysis_summary,dlp_analysis_grnneg_redpos,c("clone", "treatment", "replicate"))
colnames(dlp_analysis_summary)[13] <- "grnneg_redpos"
dlp_analysis_summary$grnneg_redpos_pct <- dlp_analysis_summary$grnneg_redpos/dlp_analysis_summary$all
DLP_summary_grnneg_redpos_plot <- ggplot() + labs(x = NULL, y = "Percent of cells", title = "Green- Red+") + scale_y_continuous(limits = c(0,1)) +
geom_quasirandom(data = dlp_analysis_summary, aes(x = treatment, y = grnneg_redpos_pct, color = clone), alpha = 0.5)
ggsave(file = "plots/DLP_summary_grnneg_redpos_plot.pdf", DLP_summary_grnneg_redpos_plot, height = 1.25, width = 2.75)
## Print out some statistics for writing into the paper
recombined_dlp_only <- dlp_analysis_summary %>% filter(treatment == "recomb")
paste("Mean of singly recombined cells by green-red analysis:", round(mean(c((recombined_dlp_only$grnpos_redneg_pct),(recombined_dlp_only$grnneg_redpos_pct))),3))
paste("Mean of doubly recombined cells by green-red analysis:", round(mean(c((recombined_dlp_only$grnpos_redpos_pct))),3))
selected_dlp_only <- dlp_analysis_summary %>% filter(treatment == "ap1903" & clone != "c6")
paste("Mean of doubly recombined cells after selection by green-red analysis:", round(mean(c((selected_dlp_only$grnpos_redpos_pct))),3))
dlp_analysis_for_pca <- dlp_analysis[,c("blu","grn","red","nir")]
dlp_analysis_for_pca2 <- cbind(dlp_analysis_for_pca, scale(dlp_analysis_for_pca, clone2.pca$center, clone2.pca$scale) %*% clone2.pca$rotation)
dlp_analysis_for_pca3 <- cbind(dlp_analysis_for_pca2,dlp_analysis[,c("clone", "treatment", "replicate")])
dlp_analysis_for_pca3_c6 <- dlp_analysis_for_pca3 %>% mutate(PC2B = PC2 - 2, label = paste0(clone,"_",replicate), pc1_2b_ratio = PC1/PC2B)
dlp_analysis_for_pca3_c6$treatment <- factor(dlp_analysis_for_pca3_c6$treatment, levels = c("none","recomb","ap1903"))
custom_color_scale3 <- c("c2_1" = "green", "c2_2" = "green", "c6_1" = "blue", "c6_2" = "blue", "c11_1" = "red", "c11_2" = "red")
All_data_PCA_histogram <- ggplot() + theme_bw() + theme(panel.grid.minor = element_blank()) +
scale_fill_manual(values = custom_color_scale3) +
scale_x_continuous(limits = c(-1.1,1.5)) +
geom_density(data = dlp_analysis_for_pca3_c6, aes(x = pc1_2b_ratio, fill = label), alpha = 0.2, size = 0.3) +
geom_vline(xintercept = -0.2, linetype = 2, alpha = 0.4, color = "red") +
geom_vline(xintercept = 0.5, linetype = 2, alpha = 0.4, color = "purple") +
facet_grid(rows = vars(treatment), scales = "free_y")
All_data_PCA_histogram
ggsave(file = "plots/All_data_PCA_histogram.pdf", All_data_PCA_histogram, height = 2.4, width = 3)
dlp_analysis_for_pca3_c6_summary_all <- dlp_analysis_for_pca3_c6 %>% group_by(clone, treatment, replicate) %>% tally()
dlp_analysis_for_pca3_c6_summary_none <- dlp_analysis_for_pca3_c6 %>% filter(pc1_2b_ratio < -0.2) %>% group_by(clone, treatment, replicate) %>% tally()
dlp_analysis_for_pca3_c6_summary_single <- dlp_analysis_for_pca3_c6 %>% filter(pc1_2b_ratio > -0.2 & pc1_2b_ratio < 0.5) %>% group_by(clone, treatment, replicate) %>% tally()
dlp_analysis_for_pca3_c6_summary_double <- dlp_analysis_for_pca3_c6 %>% filter(pc1_2b_ratio > 0.5) %>% group_by(clone, treatment, replicate) %>% tally()
dlp_analysis_for_pca3_c6_summary_combined <- left_join(dlp_analysis_for_pca3_c6_summary_all,dlp_analysis_for_pca3_c6_summary_none, c("clone","treatment","replicate"))
dlp_analysis_for_pca3_c6_summary_combined2 <- left_join(dlp_analysis_for_pca3_c6_summary_combined, dlp_analysis_for_pca3_c6_summary_single, c("clone","treatment","replicate"))
dlp_analysis_for_pca3_c6_summary_combined3 <- left_join(dlp_analysis_for_pca3_c6_summary_combined2, dlp_analysis_for_pca3_c6_summary_double, c("clone","treatment","replicate"))
colnames(dlp_analysis_for_pca3_c6_summary_combined3)[4:7] <- c("all","none","single","double")
dlp_analysis_for_pca3_c6_summary_combined3 <- dlp_analysis_for_pca3_c6_summary_combined3 %>% mutate(none_ratio = none / all, single_ratio = single / all, double_ratio = double / all, label = paste0(clone,"_",replicate))
library(reshape2)
dlp_analysis_for_pca3_c6_summary_combined3_melt <- melt(dlp_analysis_for_pca3_c6_summary_combined3[,c("treatment","label","none_ratio","single_ratio","double_ratio")], "id" = c("treatment","label"))
PCA_recombination_plot <- ggplot() + theme_bw() + theme(panel.grid.minor.x = element_blank(), panel.grid.major.x = element_blank()) +
scale_color_manual(values = custom_color_scale3) +
scale_y_continuous(breaks = c(0,0.5,1)) +
geom_quasirandom(data = dlp_analysis_for_pca3_c6_summary_combined3_melt, aes(x = variable, y = value, color = label), alpha = 0.25) +
facet_grid(rows = vars(treatment))
PCA_recombination_plot
ggsave(file = "plots/PCA_recombination_plot.pdf", PCA_recombination_plot, height = 2.45, width = 2.6)
## Print out some statistics for writing into the paper
recombined_dlp_pca_only <- dlp_analysis_for_pca3_c6_summary_combined3_melt %>% filter(treatment == "recomb")
paste("Mean of singly recombined cells by pca-based analysis:", round(mean(subset(recombined_dlp_pca_only,variable == "single_ratio")$value),3))
paste("Mean of doubly recombined cells by pca-based analysis:", round(mean(subset(recombined_dlp_pca_only,variable == "double_ratio")$value),3))
selected_dlp_pca_only <- dlp_analysis_for_pca3_c6_summary_combined3_melt %>% filter(treatment == "ap1903" & label != "c6_1" & label != "c6_2")
paste("Mean of doubly recombined cells after selection by pca-based analysis:", round(mean(subset(selected_dlp_pca_only,variable == "double_ratio")$value),3))
rep1 = read.csv("Data/jgcamp_data/rep1_signal.csv")
rep1 = rep1[-1]
rep2 = read.csv("Data/jgcamp_data/rep2_signal.csv")
rep2 = rep2[-1]
## Shifting times so addition of drug is time zero
rep1$ND.T <- rep1$ND.T - 30
rep2$ND.T <- rep2$ND.T - 30
#separate based on stimulus and variant
rep1_mch_cch = rep1 %>% filter(Name == "mCherry_cch")
rep1_005_cch = rep1 %>% filter(Name == "pNK005_cch")
rep1_013_cch = rep1 %>% filter(Name == "pNK013_cch")
rep1_mch_iono = rep1 %>% filter(Name == "mCherry_ionomycin")
rep1_005_iono = rep1 %>% filter(Name == "pNK005_ionomycin")
rep1_013_iono = rep1 %>% filter(Name == "pNK013_ionomycin")
rep2_mch_cch = rep2 %>% filter(Name == "mCherry_cch")
rep2_005_cch = rep2 %>% filter(Name == "pNK005_cch")
rep2_013_cch = rep2 %>% filter(Name == "pNK013_cch")
rep2_mch_iono = rep2 %>% filter(Name == "mCherry_ionomycin")
rep2_005_iono = rep2 %>% filter(Name == "pNK005_ionomycin")
rep2_013_iono = rep2 %>% filter(Name == "pNK013_ionomycin")
rep_4b = ggplot() +
scale_x_continuous(limits = c(-30,150), breaks = c(-30,0,30,60,90,120,150,180)) +
scale_y_continuous(limits = c(0,2500))+
geom_point(data = rep1_mch_cch, aes(x = ND.T, y = signal, color = "100uM Carbachol"), size =3, alpha = 0.2, color = "black")+
geom_point(data = rep1_mch_iono, aes(x = ND.T, y = signal, color = "2uM Ionomycin"), size =3, alpha = 0.2, color = "orange")+
labs(x = "Time (seconds)", y = "Green MFI", color = "Condition") +
theme(legend.position = "top", panel.grid.major = element_blank())
rep_4b
ggsave("Plots/rep_4b.pdf", rep_4b, width = 3.5, height = 1.75, useDingbats = F)
#fluorescence measurements for cch of each replicate
cch_rep1 = bind_rows(rep1_mch_cch, rep1_005_cch, rep1_013_cch)
cch_rep1 = cch_rep1 %>% mutate(rep = '1')
cch_rep2 = bind_rows(rep2_mch_cch, rep2_005_cch, rep2_013_cch)
cch_rep2 = cch_rep2 %>% mutate(rep = '2')
cch_reps = bind_rows(cch_rep1, cch_rep2)
cch_reps[cch_reps == "mCherry_cch"] = "Negative control"
cch_reps[cch_reps == "pNK005_cch"] = "WT STIM1"
cch_reps[cch_reps == "pNK013_cch"] = "R429C STIM1"
cch_reps$Name <- factor(cch_reps$Name, levels = c("Negative control", "WT STIM1", "R429C STIM1"))
b = ggplot(data = cch_reps, aes(x = ND.T, y = signal, color = Name))+ theme(panel.grid.major = element_blank(), legend.position = "top") +
scale_y_continuous(limits = c(0,2500))+
scale_x_continuous(limits= c(-30,150), breaks = c(0,60,120))+
labs(title = "100uM Carbachol", x = "Time (s)", y = "Green MFI", color = "Variant")+
geom_point(size = 1, alpha = 0.2) +
facet_wrap(~rep)
b
ggsave("Plots/cch_reps.pdf", b, width = 7, height = 4)
#fluorescence measurements for ionomycin of each replicate
iono_rep1 = bind_rows(rep1_mch_iono, rep1_005_iono, rep1_013_iono)
iono_rep1 = iono_rep1 %>% mutate(rep = '1')
iono_rep2 = bind_rows(rep2_mch_iono, rep2_005_iono, rep2_013_iono)
iono_rep2 = iono_rep2 %>% mutate(rep = '2')
iono_reps = bind_rows(iono_rep1, iono_rep2)
iono_reps[iono_reps == "mCherry_ionomycin"] = "Negative control"
iono_reps[iono_reps == "pNK005_ionomycin"] = "WT STIM1"
iono_reps[iono_reps == "pNK013_ionomycin"] = "R429C STIM1"
iono_reps$Name <- factor(iono_reps$Name, levels = c("Negative control", "WT STIM1", "R429C STIM1"))
c = ggplot(data = iono_reps, aes(x = ND.T, y = signal, color = Name))+ theme(panel.grid.major = element_blank(), legend.position = "top") +
scale_y_continuous(limits = c(0,6000))+ scale_x_continuous(limits= c(-30,150), breaks = c(0,60,120))+
labs(title = "2uM Ionomycin", x = "Time (s)", y = "Green MFI")+
geom_point(size = 1, alpha = 0.2) +
facet_wrap(~rep)
c
ggsave("Plots/iono_reps.pdf", c, width = 7, height = 4)
raw_gcamp_plots <- b | c
raw_gcamp_plots
ggsave(file = "Plots/Raw_gcamp_plots.pdf", raw_gcamp_plots, height = 3, width = 5)
#100uM carbachol
#replicate 1
comp_rep1_cch = data.frame(matrix(ncol = 3, nrow = 3))
colnames(comp_rep1_cch) = c("variant", "Start value", "Peak value")
comp_rep1_cch[1,1] = "Negative control"
comp_rep1_cch[2,1] = "WT STIM1"
comp_rep1_cch[3,1] = "R429C STIM1"
comp_rep1_cch[1,2] = mean(rep1_mch_cch$signal[1:30]) #min(rep1_mch_cch$signal)
comp_rep1_cch[2,2] = mean(rep1_005_cch$signal[1:30]) #min(rep1_005_cch$signal)
comp_rep1_cch[3,2] = mean(rep1_013_cch$signal[1:30]) #min(rep1_013_cch$signal)
comp_rep1_cch[1,3] = quantile(rep1_mch_cch$signal, 0.95) #max(rep1_mch_cch$signal)
comp_rep1_cch[2,3] = quantile(rep1_005_cch$signal, 0.95) #max(rep1_005_cch$signal)
comp_rep1_cch[3,3] = quantile(rep1_013_cch$signal, 0.95) #max(rep1_013_cch$signal)
comp_rep1_cchlg = comp_rep1_cch %>% melt() %>% mutate(replicate = '1')
#replicate 2
comp_rep2_cch = data.frame(matrix(ncol = 3, nrow = 3))
colnames(comp_rep2_cch) = c("variant", "Start value", "Peak value")
comp_rep2_cch[1,1] = "Negative control"
comp_rep2_cch[2,1] = "WT STIM1"
comp_rep2_cch[3,1] = "R429C STIM1"
comp_rep2_cch[1,2] = mean(rep2_mch_cch$signal[1:30]) #min(rep2_mch_cch$signal)
comp_rep2_cch[2,2] = mean(rep2_005_cch$signal[1:30]) #min(rep2_005_cch$signal)
comp_rep2_cch[3,2] = mean(rep2_013_cch$signal[1:30]) #min(rep2_013_cch$signal)
comp_rep2_cch[1,3] = quantile(rep2_mch_cch$signal, 0.95) #max(rep2_mch_cch$signal)
comp_rep2_cch[2,3] = quantile(rep2_005_cch$signal, 0.95) #max(rep2_005_cch$signal)
comp_rep2_cch[3,3] = quantile(rep2_013_cch$signal, 0.95) #max(rep2_013_cch$signal)
comp_rep2_cchlg = comp_rep2_cch %>% melt() %>% mutate(replicate = '2')
comp_cch = bind_rows(comp_rep1_cchlg, comp_rep2_cchlg)
cch_4c = ggplot(data = comp_cch, aes(x =variable, y= value, color = variant))+
geom_point(position=position_dodge(width = 0.25)) +
stat_summary(geom = "point", shape = 8,  position = position_dodge(width = 0.25))+
scale_x_discrete(labels = c("Initial", "Peak"))+
labs(x = "Time point", y = "Green MFI", color = "Variant")+
theme(text=element_text(size=20), legend.position = "none")
cch_4c
ggsave("Plots/cch_4c.pdf", cch_4c, width = 4, height = 3)
#ionomycin
#replicate 1
comp_rep1_iono = data.frame(matrix(ncol = 3, nrow = 3))
colnames(comp_rep1_iono) = c("variant", "Start value", "Peak value")
comp_rep1_iono[1,1] = "Negative control"
comp_rep1_iono[2,1] = "WT STIM1"
comp_rep1_iono[3,1] = "R429C STIM1"
comp_rep1_iono[1,2] = mean(rep1_mch_iono$signal[1:30]) #min(rep1_mch_iono$signal)
comp_rep1_iono[2,2] = mean(rep1_005_iono$signal[1:30]) #min(rep1_005_iono$signal)
comp_rep1_iono[3,2] = mean(rep1_013_iono$signal[1:30]) #min(rep1_013_iono$signal)
comp_rep1_iono[1,3] =  #max(rep1_mch_iono$signal)
comp_rep1_iono[2,3] = quantile(rep1_005_iono$signal, 0.95) #max(rep1_005_iono$signal)
comp_rep1_iono[3,3] = quantile(rep1_013_iono$signal, 0.95) #max(rep1_013_iono$signal)
comp_rep1_ionolg = comp_rep1_iono %>% melt() %>% mutate(replicate = '1')
#replicate 2
comp_rep2_iono = data.frame(matrix(ncol = 3, nrow = 3))
colnames(comp_rep2_iono) = c("variant", "Start value", "Peak value")
comp_rep2_iono[1,1] = "Negative control"
comp_rep2_iono[2,1] = "WT STIM1"
comp_rep2_iono[3,1] = "R429C STIM1"
comp_rep2_iono[1,2] = mean(rep2_mch_iono$signal[1:30]) #min(rep2_mch_iono$signal)
comp_rep2_iono[2,2] = mean(rep2_005_iono$signal[1:30]) #min(rep2_005_iono$signal)
comp_rep2_iono[3,2] = mean(rep2_013_iono$signal[1:30]) #min(rep2_013_iono$signal)
comp_rep2_iono[1,3] = quantile(rep2_mch_iono$signal, 0.95) #max(rep2_mch_iono$signal)
comp_rep2_iono[2,3] = quantile(rep2_005_iono$signal, 0.95) #max(rep2_005_iono$signal)
comp_rep2_iono[3,3] = quantile(rep2_013_iono$signal, 0.95) #max(rep2_013_iono$signal)
comp_rep2_ionolg = comp_rep2_iono %>% melt() %>% mutate(replicate = '2')
comp_iono = bind_rows(comp_rep1_ionolg, comp_rep2_ionolg)
iono_4c = ggplot(data = comp_iono, aes(x =variable, y= value, color = variant))+ scale_y_continuous(limits = c(0,6000))+
geom_point(position=position_dodge(width = 0.25)) +
stat_summary(geom = "point", shape = 8,  position = position_dodge(width = 0.25))+
scale_x_discrete(labels = c("Initial", "Peak"))+
labs(x = "Time point", y = "Green MFI", color = "Variant")+
theme(text=element_text(size=20), legend.position = "none")
iono_4c
ggsave("Plots/iono_4c.pdf", iono_4c, width = 4, height = 3)
## Another version of the plots, from the way I do it (KAM)
comp_cch$variant <- factor(comp_cch$variant, levels = c("Negative control", "WT STIM1", "R429C STIM1"))
comp_iono$variant <- factor(comp_iono$variant, levels = c("Negative control", "WT STIM1", "R429C STIM1"))
cch4c_version2 <- ggplot() + theme(legend.position = "top", panel.grid.major.x = element_blank(), axis.text.x.bottom = element_text(angle = 45, hjust = 1, vjust = 1)) +
labs(title = "Carbachol", x = NULL, y = "Mean fluorescent intensity") +
scale_y_continuous(limits = c(-200,6000)) +
geom_hline(yintercept = 0, alpha = 0.5) +
geom_point(data = comp_cch, aes(x = variable, y = value, color = variant), position = position_dodge(width = 0.6)) +
geom_point(data = comp_cch %>% group_by(variant, variable) %>% summarize(value = mean(value)), aes(x = variable, y = value, color = variant), position = position_dodge(width = 0.6), shape = 95, size = 5)
cch4c_version2
iono4c_version2 <- ggplot() + theme(legend.position = "top", panel.grid.major.x = element_blank(), axis.text.x.bottom = element_text(angle = 45, hjust = 1, vjust = 1)) +
labs(title = "Ionomycin", x = NULL, y = "Mean fluorescent intensity") +
scale_y_continuous(limits = c(-200,6000)) +
geom_hline(yintercept = 0, alpha = 0.5) +
geom_point(data = comp_iono, aes(x = variable, y = value, color = variant), position = position_dodge(width = 0.6)) +
geom_point(data = comp_iono %>% group_by(variant, variable) %>% summarize(value = mean(value)), aes(x = variable, y = value, color = variant), position = position_dodge(width = 0.6), shape = 95, size = 5)
#iono4c_version2
peak_figure <- cch4c_version2 | iono4c_version2
peak_figure
ggsave(file = "Plots/Peak_value.pdf", peak_figure, height = 2.5, width = 3)
#carbachol
#rep 1
rep1_cch_mch_decay = rep1_mch_cch %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep1_cch_005_decay = rep1_005_cch %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep1_cch_013_decay = rep1_013_cch %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep1_cch_decay_normpeak = bind_rows(rep1_cch_mch_decay, rep1_cch_005_decay, rep1_cch_013_decay)
#rep 2
rep2_cch_mch_decay = rep2_mch_cch %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep2_cch_005_decay = rep2_005_cch %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep2_cch_013_decay = rep2_013_cch %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep2_cch_decay_normpeak = bind_rows(rep2_cch_mch_decay, rep2_cch_005_decay, rep2_cch_013_decay)
rep_normpeak_decay = bind_rows(rep1_cch_decay_normpeak, rep2_cch_decay_normpeak)
rep_normpeak_decay[rep_normpeak_decay == "mCherry_cch"] = "Negative control"
rep_normpeak_decay[rep_normpeak_decay == "pNK005_cch"] = "WT STIM1"
rep_normpeak_decay[rep_normpeak_decay == "pNK013_cch"] = "R429C STIM1"
cch_normpeak_4d = ggplot(data = rep_normpeak_decay, aes(x = ND.T, y = norm_peak, color = Name)) +
theme_bw() +
scale_y_continuous(breaks = c(0,0.5,1)) +
scale_x_continuous(breaks = c(-30,0,30,60,90,120,150))+
labs(x = "Time (s)", y = "Green MFI", color = "Variant")+ theme(text = element_text(size = 20)) +
geom_line(size = 1) +
facet_wrap(~rep)
cch_normpeak_4d
## Kenny mods
rep_normpeak_decay2 <- rep_normpeak_decay %>% group_by(Name, ND.T) %>% summarize(mean_normpeak_decay = mean(norm_peak))
rep_normpeak_decay2$Name <- factor(rep_normpeak_decay2$Name, levels = c("Negative control", "WT STIM1", "R429C STIM1"))
cch_normpeak_average_decay <- ggplot() + theme(legend.position = "top") +
labs(x = "Time (seconds)", y = "Normalized fluorescence", title = "Carbachol") +
scale_x_continuous(breaks = c(-30,0,30,60,90,120,150))+
geom_hline(yintercept = 0, alpha = 0.5) +
geom_point(data = rep_normpeak_decay2, aes(x = ND.T, y = mean_normpeak_decay, color = Name), alpha = 0.2)
cch_normpeak_average_decay
#ionomycin
#rep 1
rep1_iono_mch_decay = rep1_mch_iono %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep1_iono_005_decay = rep1_005_iono %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep1_iono_013_decay = rep1_013_iono %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep1_iono_decay_normpeak = bind_rows(rep1_iono_mch_decay, rep1_iono_005_decay, rep1_iono_013_decay)
#rep 2
rep2_iono_mch_decay = rep2_mch_iono %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep2_iono_005_decay = rep2_005_iono %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep2_iono_013_decay = rep2_013_iono %>% mutate(norm_peak = signal/quantile(signal, 0.95))
rep2_iono_decay_normpeak = bind_rows(rep2_iono_mch_decay, rep2_iono_005_decay, rep2_iono_013_decay)
rep_normpeak_decay_iono = bind_rows(rep1_iono_decay_normpeak, rep2_iono_decay_normpeak)
rep_normpeak_decay_iono[rep_normpeak_decay_iono$Name == "mCherry_ionomycin","Name"] = "Negative control"
rep_normpeak_decay_iono[rep_normpeak_decay_iono$Name == "pNK005_ionomycin","Name"] = "WT STIM1"
rep_normpeak_decay_iono[rep_normpeak_decay_iono$Name == "pNK013_ionomycin","Name"] = "R429C STIM1"
iono_normpeak_4d = ggplot(data = rep_normpeak_decay_iono, aes(x = ND.T, y = norm_peak, color = Name))+theme_bw()+ scale_y_continuous(breaks = c(0,0.5,1))+
scale_x_continuous(breaks = c(-30,0,30,60,90,120,150))+
labs(x = "Time (s)", y = "Green MFI", color = "Variant")+ theme(text = element_text(size = 20)) +
geom_line(size = 1) +
facet_wrap(~rep)
iono_normpeak_4d
## Kenny mods
rep_normpeak_decay_iono2 <- rep_normpeak_decay_iono %>% group_by(Name, ND.T) %>% summarize(mean_normpeak_decay = mean(norm_peak))
rep_normpeak_decay_iono2$Name <- factor(rep_normpeak_decay_iono2$Name, levels = c("Negative control", "WT STIM1", "R429C STIM1"))
iono_normpeak_average_decay <- ggplot() + theme(legend.position = "top") +
labs(x = "Time (seconds)", y = "Normalized fluorescence", title = "Ionomycin") +
scale_x_continuous(breaks = c(-30,0,30,60,90,120,150))+
geom_hline(yintercept = 0, alpha = 0.5) +
geom_point(data = rep_normpeak_decay_iono2, aes(x = ND.T, y = mean_normpeak_decay, color = Name), alpha = 0.2)
iono_normpeak_average_decay
# ggsave("cch_normpeak_4d.pdf", cch_normpeak_4d, width = 7, height = 4)
# ggsave("iono_normpeak_4d.pdf", iono_normpeak_4d, width = 7, height = 4)
grid.arrange(cch_normpeak_4d, iono_normpeak_4d)
Decay_curves <- cch_normpeak_average_decay | iono_normpeak_average_decay
Decay_curves
ggsave(file = "Plots/Decay_curves.pdf", Decay_curves, height = 2.5, width = 5)
vif_apobec <- read.csv(file = "data/flow/Vif_Apobec/Orientations.csv")
vif_apobec_fusions <- vif_apobec %>% filter(gene != "None")
vif_apobec_egfp <- vif_apobec %>% filter(gene == "None")
Apobec_fusions_plot <- ggplot() + theme_bw() + theme(panel.grid.minor = element_blank()) +
labs(x = "Geometric mean of MFI (Apobec only)", y = "Geometric mean of MFI\n(HIV-1 vif coexpressed)") +
scale_x_log10() + scale_y_log10() +
geom_abline(slope = 1, alpha = 0.2, linetype = 2, alpha = 0.5, size = 1.5) +
geom_point(data = vif_apobec_fusions, aes(x = stop, y = wt, color = gene, shape = orientation), size = 3, alpha = 0.7) +
geom_point(data = vif_apobec_egfp, aes(x = stop, y = wt), size = 3, shape = 15, alpha = 0.7)
Apobec_fusions_plot
ggsave(file = "plots/Apobec_fusions_plot.pdf", Apobec_fusions_plot, height = 2.2, width = 4)
va_rep1 <- read.csv(file = "Data/Vif_apobec/Vif_apobec_rep1.csv", header = T)
for(x in 1:nrow(va_rep1)){
for(y in 2:ncol(va_rep1)){
va_rep1[x,y] <- va_rep1[x,y] / va_rep1[6,y]
}
}
va_rep1_melt <- melt(va_rep1) %>% filter(variable != "EGFP.A3F")
colnames(va_rep1_melt) <- c("vif","apobec","normalized")
va_rep1_melt$rep <- 1
va_rep2 <- read.csv(file = "Data/Vif_apobec/Vif_apobec_rep2.csv", header = T)
for(x in 1:nrow(va_rep2)){
for(y in 2:ncol(va_rep2)){
va_rep2[x,y] <- va_rep2[x,y] / va_rep2[8,y]
}
}
va_rep2_melt <- melt(va_rep2)
colnames(va_rep2_melt) <- c("vif","apobec","normalized")
va_rep2_melt$rep <- 2
va_rep3 <- read.csv(file = "Data/Vif_apobec/Vif_apobec_rep3.csv", header = T)
for(x in 1:nrow(va_rep3)){
for(y in 2:ncol(va_rep3)){
va_rep3[x,y] <- va_rep3[x,y] / va_rep3[8,y]
}
}
va_rep3_melt <- melt(va_rep3)
colnames(va_rep3_melt) <- c("vif","apobec","normalized")
va_rep3_melt$rep <- 2
va_rep_combined <- rbind(va_rep1_melt, va_rep2_melt, va_rep3_melt)
va_rep_combined_summary <- va_rep_combined %>% group_by(vif, apobec) %>% summarize(mean = mean(normalized), sd = sd(normalized)) %>% mutate(mean_log2 = log2(mean), sd_log2 = log2(sd))
va_rep_combined_summary$apobec <- factor(va_rep_combined_summary$apobec, levels = c("EGFP","A3G.EGFP","EGFP.A3D","EGFP.A3H2"))
va_rep_combined_summary$vif <- factor(va_rep_combined_summary$vif, levels = rev(c("WT","STOP","W89R","A149Y","W11A","H43E","F39A","G84K")))
vif_apobec_heatmap1 <- ggplot() + theme(axis.text.x.bottom = element_text(angle = 45, hjust = 1, vjust = 1)) +
labs(x = "EGFP or Apobec fusion", y = "HIV-1 Vif variant") +
#scale_fill_gradient2(low = "white", mid = "darkgreen", high = "red", na.value = "brown4", limits = c(0.25,1.3), midpoint = 1) +
scale_fill_gradient2(low = "white", mid = "darkgreen", high = "red", na.value = "green4", limits = c(log2(0.25),log2(1.3)), midpoint = 1) +
geom_tile(data = va_rep1_melt, aes(x = apobec, y = vif, fill = log2(normalized)))
vif_apobec_heatmap1
ggsave(file = "Plots/Vif_apobec_heatmap1.pdf", vif_apobec_heatmap1, height = 2, width = 3.5)
vif_apobec_heatmap2 <- ggplot() + theme(axis.text.x.bottom = element_text(angle = 45, hjust = 1, vjust = 1)) +
labs(x = "EGFP or Apobec fusion", y = "HIV-1 Vif variant") +
#scale_fill_gradient2(low = "white", mid = "darkgreen", high = "red", na.value = "brown4", limits = c(0.25,1.3), midpoint = 1) +
scale_fill_gradient2(low = "white", mid = "darkgreen", high = "red", na.value = "green4", limits = c(log2(0.18),log2(1.32)), midpoint = 1) +
geom_tile(data = va_rep2_melt, aes(x = apobec, y = vif, fill = log2(normalized)))
vif_apobec_heatmap2
ggsave(file = "Plots/Vif_apobec_heatmap2.pdf", vif_apobec_heatmap2, height = 2, width = 3.5)
vif_apobec_heatmap3 <- ggplot() + theme(axis.text.x.bottom = element_text(angle = 45, hjust = 1, vjust = 1)) +
labs(x = "EGFP or Apobec fusion", y = "HIV-1 Vif variant") +
#scale_fill_gradient2(low = "white", mid = "darkgreen", high = "red", na.value = "brown4", limits = c(0.25,1.3), midpoint = 1) +
scale_fill_gradient2(low = "white", mid = "darkgreen", high = "red", na.value = "green4", limits = c(log2(0.2),log2(1.62)), midpoint = 1) +
geom_tile(data = va_rep3_melt, aes(x = apobec, y = vif, fill = log2(normalized)))
vif_apobec_heatmap3
ggsave(file = "Plots/Vif_apobec_heatmap3.pdf", vif_apobec_heatmap3, height = 2, width = 3.5)
vif_apobec_heatmap_combined <- ggplot() + theme(axis.text.x.bottom = element_text(angle = 45, hjust = 1, vjust = 1)) +
labs(x = "EGFP or Apobec fusion", y = "HIV-1 Vif variant") +
#scale_fill_gradient2(low = "white", mid = "darkgreen", high = "red", na.value = "brown4", limits = c(0.25,1.3), midpoint = 1) +
scale_fill_gradient2(low = "white", mid = "darkgreen", high = "red", na.value = "green4", limits = c(-2.15,0.4), midpoint = 1) +
geom_tile(data = va_rep_combined_summary, aes(x = apobec, y = vif, fill = mean_log2))
vif_apobec_heatmap_combined
ggsave(file = "Plots/vif_apobec_heatmap_combined.pdf", vif_apobec_heatmap_combined, height = 2, width = 3)
va_rep_combined$vif <- factor(va_rep_combined$vif, levels = c("WT","STOP","W89R","A149Y","W11A","H43E","F39A","G84K"))
va_rep_combined_summary$vif <- factor(va_rep_combined_summary$vif, levels = c("WT","STOP","W89R","A149Y","W11A","H43E","F39A","G84K"))
EGFP_plot <- ggplot() + theme(panel.grid.major.x = element_blank(), plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_log10(limits = c(0.18,1.62), breaks = c(0.25,0.5,1)) + labs(title = "EGFP", x = NULL) +
geom_hline(yintercept = 1, alpha = 0.4) +
geom_point(data = va_rep_combined %>% filter(apobec == "EGFP"), aes(x = vif, y = normalized), alpha = 0.4, color = "red") +
geom_point(data = va_rep_combined_summary %>% filter(apobec == "EGFP"), aes(x = vif, y = mean), shape = 95, size = 6)
EGFP_plot
A3G.EGFP_plot <- ggplot() + theme(panel.grid.major.x = element_blank(), plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_log10(limits = c(0.18,1.62), breaks = c(0.25,0.5,1)) + labs(title = "A3G-EGFP", x = NULL) +
geom_hline(yintercept = 1, alpha = 0.4) +
geom_point(data = va_rep_combined %>% filter(apobec == "A3G.EGFP"), aes(x = vif, y = normalized), alpha = 0.4, color = "red") +
geom_point(data = va_rep_combined_summary %>% filter(apobec == "A3G.EGFP"), aes(x = vif, y = mean), shape = 95, size = 6)
A3G.EGFP_plot
EGFP.A3D_plot <- ggplot() + theme(panel.grid.major.x = element_blank(), plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_log10(limits = c(0.18,1.62), breaks = c(0.25,0.5,1)) + labs(title = "EGFP-A3D", x = NULL) +
geom_hline(yintercept = 1, alpha = 0.4) +
geom_point(data = va_rep_combined %>% filter(apobec == "EGFP.A3D"), aes(x = vif, y = normalized), alpha = 0.4, color = "red") +
geom_point(data = va_rep_combined_summary %>% filter(apobec == "EGFP.A3D"), aes(x = vif, y = mean), shape = 95, size = 6)
EGFP.A3D_plot
EGFP.A3H2_plot <- ggplot() + theme(panel.grid.major.x = element_blank(), plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_y_log10(limits = c(0.18,1.62), breaks = c(0.25,0.5,1)) + labs(title = "EGFP-A3H2", x = NULL) +
geom_hline(yintercept = 1, alpha = 0.4) +
geom_point(data = va_rep_combined %>% filter(apobec == "EGFP.A3H2"), aes(x = vif, y = normalized), alpha = 0.4, color = "red") +
geom_point(data = va_rep_combined_summary %>% filter(apobec == "EGFP.A3H2"), aes(x = vif, y = mean), shape = 95, size = 6)
EGFP.A3H2_plot
Apobec_vif_supp_fig <- EGFP_plot | A3G.EGFP_plot | EGFP.A3D_plot | EGFP.A3H2_plot
Apobec_vif_supp_fig
ggsave(file = "Plots/Apobec_vif_supp_fig.pdf", Apobec_vif_supp_fig, height = 2, width = 8)
attB_plasmid_mixture <- read.delim(file = "data/GN_recombinations/attBmix_outfile.tsv", header = T, stringsAsFactors = F)
attB_plasmid_mixture_table <- data.frame(table(attB_plasmid_mixture$attB))
attB_plasmid_mixture_table$Freq2 <- attB_plasmid_mixture_table$Freq / sum(attB_plasmid_mixture_table$Freq)
colnames(attB_plasmid_mixture_table) <- c("attB","start_count","start_freq")
## Rep 1
rep1_ga <- read.delim(file = "data/GN_recombinations/Rep1_GA_outfile.tsv", header = T, stringsAsFactors = F)
rep1_ga2 <- data.frame(table(rep1_ga$attB)) %>% mutate(attP = "GA")
rep1_gt <- read.delim(file = "data/GN_recombinations/Rep1_GT_outfile.tsv", header = T, stringsAsFactors = F)
rep1_gt2 <- data.frame(table(rep1_gt$attB)) %>% mutate(attP = "GT")
rep1_gc <- read.delim(file = "data/GN_recombinations/Rep1_GC_outfile.tsv", header = T, stringsAsFactors = F)
rep1_gc2 <- data.frame(table(rep1_gc$attB)) %>% mutate(attP = "GC")
rep1_gg <- read.delim(file = "data/GN_recombinations/Rep1_GG_outfile.tsv", header = T, stringsAsFactors = F)
rep1_gg2 <- data.frame(table(rep1_gg$attB)) %>% mutate(attP = "GG")
rep1_comb <- rbind(rep1_ga2, rep1_gt2, rep1_gc2, rep1_gg2)
colnames(rep1_comb) <- c("attB","Freq","attP")
gn_rep1_results_frame <- data.frame("attB" = NA, "attP" = NA, "final_freq" = NA, "start_freq" = NA)
for( x in c("GT","GA","GC","GG")){
temp_subset <- subset(rep1_comb, attP == x)
temp_subset$final_freq <- temp_subset$Freq / sum(temp_subset$Freq)
temp_subset2 <- merge(temp_subset[,c("attP","attB","final_freq")], attB_plasmid_mixture_table[,c("attB","start_freq")])
gn_rep1_results_frame <- rbind(gn_rep1_results_frame, temp_subset2)
}
gn_rep1_results_frame <- gn_rep1_results_frame %>% filter(!is.na(attB)) %>% mutate(rep = 1)
## Rep 2
gn_rep2 <- read.delim(file = "data/GN_recombinations/Rep2_outfile.tsv", header = T, stringsAsFactors = F)
gn_rep2_table <- data.frame(with(gn_rep2,table(attP,attB)))
gn_rep2_results_frame <- data.frame("attB" = NA, "attP" = NA, "final_freq" = NA, "start_freq" = NA)
for( x in c("GT","GA","GC","GG")){
temp_subset <- subset(gn_rep2_table, attP == x)
temp_subset$final_freq <- temp_subset$Freq / sum(temp_subset$Freq)
temp_subset2 <- merge(temp_subset[,c("attP","attB","final_freq")], attB_plasmid_mixture_table[,c("attB","start_freq")])
gn_rep2_results_frame <- rbind(gn_rep2_results_frame, temp_subset2)
}
gn_rep2_results_frame <- gn_rep2_results_frame %>% filter(!is.na(attB)) %>% mutate(rep = 2)
## Rep 3
gn_rep3 <- read.delim(file = "data/GN_recombinations/Rep3_outfile.tsv", header = T, stringsAsFactors = F)
gn_rep3_table <- data.frame(with(gn_rep3,table(attP,attB)))
gn_rep3_results_frame <- data.frame("attB" = NA, "attP" = NA, "final_freq" = NA, "start_freq" = NA)
for( x in c("GT","GA","GC","GG")){
temp_subset <- subset(gn_rep3_table, attP == x)
temp_subset$final_freq <- temp_subset$Freq / sum(temp_subset$Freq)
temp_subset2 <- merge(temp_subset[,c("attP","attB","final_freq")], attB_plasmid_mixture_table[,c("attB","start_freq")])
gn_rep3_results_frame <- rbind(gn_rep3_results_frame, temp_subset2)
}
gn_rep3_results_frame <- gn_rep3_results_frame %>% filter(!is.na(attB)) %>% mutate(rep = 3)
## Combine the results of all three replicates
gn_combined <- rbind(gn_rep1_results_frame, gn_rep2_results_frame, gn_rep3_results_frame)
gn_combined$enrichment <- gn_combined$final_freq/gn_combined$start_freq
write.csv(file = "data/GN_recombination_results.csv", gn_combined, row.names = FALSE)
gn_combined_summary <- gn_combined %>% group_by(attP, attB) %>% summarize(mean = mean(final_freq), sd = sd(final_freq))
gn_combined_summary2 <- rbind(gn_combined_summary, data.frame("attP" = "Input", "attB" = attB_plasmid_mixture_table$attB, "mean" = attB_plasmid_mixture_table$start_freq, "sd" = NA))
gn_combined$attP <- factor(gn_combined$attP, levels = c("GT","GA","GC","GG"))
gn_combined_summary2$attP <- factor(gn_combined_summary2$attP, levels = c("Input", "GT","GA","GC","GG"))
Orthogonal_plasmid_recombinations <- ggplot() + scale_y_log10() + theme(panel.grid.major.x = element_blank()) +
labs(x = "AttP plasmid (individually tested)", y = "Fraction of\nrecombinants", color = "AttB\nplasmid\n(mixed)") +
geom_point(data = gn_combined_summary2, aes(x = attP, y = mean, color = attB), position = position_dodge(width = 0.6), shape = 95, size = 4) +
geom_point(data = gn_combined, aes(x = attP, y = final_freq, color = attB), position = position_dodge(width = 0.6), alpha = 0.4) +
#geom_errorbar(data = gn_combined_summary2, aes(x = attP, ymin = mean - sd/sqrt(2)*1.96, ymax = mean + sd/sqrt(3)*1.96, color = attB), position = position_dodge(width = 0.6), width = 0.5, alpha = 0.5) +
geom_point(data = gn_combined_summary2, aes(x = attP, y = mean, color = attB), position = position_dodge(width = 0.6), shape = 95, size = 4) +
NULL
ggsave(file = "plots/Orthogonal_plasmid_recombinations.pdf", Orthogonal_plasmid_recombinations, height = 2, width = 4.2)
Orthogonal_plasmid_recombinations
Orthogonal_plasmid_recombinations_linear <- ggplot() + theme(panel.grid.major.x = element_blank()) +
labs(x = "AttP plasmid (individually tested)", y = "Fraction of\nrecombinants", color = "AttB\nplasmid\n(mixed)") +
geom_point(data = gn_combined_summary2, aes(x = attP, y = mean, color = attB), position = position_dodge(width = 0.6), shape = 95, size = 4) +
geom_point(data = gn_combined, aes(x = attP, y = final_freq, color = attB), position = position_dodge(width = 0.6), alpha = 0.4) +
#geom_errorbar(data = gn_combined_summary2, aes(x = attP, ymin = mean - sd/sqrt(2)*1.96, ymax = mean + sd/sqrt(3)*1.96, color = attB), position = position_dodge(width = 0.6), width = 0.5, alpha = 0.5) +
geom_point(data = gn_combined_summary2, aes(x = attP, y = mean, color = attB), position = position_dodge(width = 0.6), shape = 95, size = 4) +
NULL
ggsave(file = "plots/Orthogonal_plasmid_recombinations_linear.pdf", Orthogonal_plasmid_recombinations_linear, height = 2, width = 4.2)
Orthogonal_plasmid_recombinations_linear
recomb_mixture_test <- gn_combined_summary[1:16,c("attP","attB")]
colnames(recomb_mixture_test) <- c("lp1","lp2")
simulation_test_size = 100000
recomb_mixture_test$on_target <- NA
for(x in 1:nrow(recomb_mixture_test)){
recomb_mix_lp1 <- recomb_mixture_test$lp1[x]
recomb_mix_lp2 <- recomb_mixture_test$lp2[x]
if(recomb_mix_lp1 == recomb_mix_lp2){
lp1_sampling <- sample(x = c(1,0), prob = c(0.5,0.5) , size = simulation_test_size, replace = T)
lp2_sampling <- sample(x = c(1,0), prob = c(0.5,0.5) , size = simulation_test_size, replace = T)
results_frame <- data.frame("lp1_on_target" = lp1_sampling == 1, "lp2_on_target" = lp2_sampling == 1)
results_frame$sum <- results_frame$lp1_on_target + results_frame$lp2_on_target
recomb_mixture_test$on_target[x] <- sum(results_frame$sum == 1)
}
if(recomb_mix_lp1 != recomb_mix_lp2){
lp1_probs <- gn_combined_summary %>% filter(attP == recomb_mix_lp1 & attB %in% c(recomb_mix_lp1, recomb_mix_lp2))
lp1_probs$norm <- lp1_probs$mean/sum(lp1_probs$mean)
lp2_probs <- gn_combined_summary %>% filter(attP == recomb_mix_lp2 & attB %in% c(recomb_mix_lp1, recomb_mix_lp2))
lp2_probs$norm <- lp2_probs$mean/sum(lp2_probs$mean)
lp1_sampling <- sample(x = lp1_probs$attB, prob = lp1_probs$norm , size = simulation_test_size, replace = T)
lp2_sampling <- sample(x = lp2_probs$attB, prob = lp2_probs$norm , size = simulation_test_size, replace = T)
results_frame <- data.frame("lp1_on_target" = lp1_sampling == recomb_mix_lp1, "lp2_on_target" = lp2_sampling == recomb_mix_lp2)
results_frame$sum <- results_frame$lp1_on_target + results_frame$lp2_on_target
recomb_mixture_test$on_target[x] <- sum(results_frame$sum == 2) + sum(results_frame$sum == 0)
}
}
recomb_mixture_test$frac_on_target <- recomb_mixture_test$on_target / simulation_test_size
Double_LP_heatmap <- ggplot() + labs(x = "First landing pad", y = "Second landing pad", fill = "Fraction\nwith unique\nrecombinant\nplasmid pair") +
scale_fill_gradient2(low = "white", high = "red", midpoint = 0.8) +
geom_tile(data = recomb_mixture_test, aes(x = lp1, y = lp2, fill = frac_on_target)) +
geom_tile(data = recomb_mixture_test %>% filter(lp1 == "GC" | lp2 == "GC"), aes(x = lp1, y = lp2, fill = frac_on_target), color = "blue", alpha = 0, size = 0.5) +
geom_text(data = recomb_mixture_test, aes(x = lp1, y = lp2, label = round(frac_on_target,2)), size = 3)
ggsave(file = "plots/Double_LP_heatmap.pdf", Double_LP_heatmap, height = 2, width = 3.3)
Double_LP_heatmap
